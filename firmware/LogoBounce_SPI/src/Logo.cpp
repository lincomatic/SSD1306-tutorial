#include "Adafruit_SSD1306_RK.h"

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

#define OLED_DC     A4
#define OLED_CS     A3
#define OLED_RESET  A5

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
		&SPI, OLED_DC, OLED_RESET, OLED_CS);

void updateDisplay();

const unsigned long UPDATE_INTERVAL_MS = 20;
unsigned long lastUpdate = 0;

int xx = 16;
int yy = 16;
int vx = 1;
int vy = 1;

void setup() {
	display.begin(SSD1306_SWITCHCAPVCC);

}

void loop() {
	if (millis() - lastUpdate >= UPDATE_INTERVAL_MS) {
		lastUpdate = millis();

		updateDisplay();
	}
}

const uint8_t bitmap6[] = {0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x08, 0x01, 0x80, 0x10, 0x06, 0x03, 0xc0, 0x60, 0x07, 0x03, 0xc0, 0xe0, 0x03, 0xc3, 0xc3, 0xc0, 0x01, 0xe3, 0xcf, 0x80, 0x01, 0xf9, 0x9f, 0x80, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x07, 0xbf, 0xfd, 0xe0, 0xff, 0xdf, 0xfb, 0xff, 0xff, 0xdf, 0xfb, 0xff, 0x07, 0xbf, 0xfd, 0xe0, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x01, 0xf9, 0x9f, 0x80, 0x01, 0xe3, 0xcf, 0x80, 0x03, 0xc3, 0xc3, 0xc0, 0x07, 0x03, 0xc0, 0xe0, 0x06, 0x03, 0xc0, 0x60, 0x08, 0x01, 0x80, 0x10, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00};

void updateDisplay() {
    display.clearDisplay();
    display.drawBitmap(xx - 16, yy - 16, bitmap6, 32, 32, 1);
    display.display();


    // Algorithm from:
    // https://www.101computing.net/bouncing-algorithm/
    xx += vx;
    yy += vy;

    if (xx < 16 || xx >= (SCREEN_WIDTH - 16)) {
    	vx = -vx;
    	xx += vx;
    }

    if (yy < 16 || yy >= (SCREEN_HEIGHT - 16)) {
    	vy = -vy;
    	yy += vy;
    }
}

