#include "Adafruit_SSD1306_RK.h"

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

#define OLED_RESET  A5
#define OLED_DC     A4
#define OLED_CS     A3

#define OLED2_CS     A2


Adafruit_SSD1306 display1(SCREEN_WIDTH, SCREEN_HEIGHT,
		&SPI, OLED_DC, OLED_RESET, OLED_CS);

// Note: OLED_RESET is not passed to this constructor. Only pass it to the first display
// that you call begin() on!
Adafruit_SSD1306 display2(SCREEN_WIDTH, SCREEN_HEIGHT,
		&SPI, OLED_DC, -1, OLED2_CS);

void updateDisplay1();
void updateDisplay2();

const unsigned long UPDATE_INTERVAL_MS = 20;
unsigned long lastUpdate = 0;

int xx = 16;
int yy = 16;
int vx = 1;
int vy = 1;

int yy2 = 0;
int vy2 = 1;

void setup() {
	display1.begin(SSD1306_SWITCHCAPVCC);
	display2.begin(SSD1306_SWITCHCAPVCC);
}

void loop() {
	if (millis() - lastUpdate >= UPDATE_INTERVAL_MS) {
		lastUpdate = millis();

		updateDisplay1();
		updateDisplay2();
	}
}

const uint8_t bitmap6[] = {0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x08, 0x01, 0x80, 0x10, 0x06, 0x03, 0xc0, 0x60, 0x07, 0x03, 0xc0, 0xe0, 0x03, 0xc3, 0xc3, 0xc0, 0x01, 0xe3, 0xcf, 0x80, 0x01, 0xf9, 0x9f, 0x80, 0x00, 0xfe, 0x7f, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x07, 0xbf, 0xfd, 0xe0, 0xff, 0xdf, 0xfb, 0xff, 0xff, 0xdf, 0xfb, 0xff, 0x07, 0xbf, 0xfd, 0xe0, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x00, 0xfe, 0x7f, 0x00, 0x01, 0xf9, 0x9f, 0x80, 0x01, 0xe3, 0xcf, 0x80, 0x03, 0xc3, 0xc3, 0xc0, 0x07, 0x03, 0xc0, 0xe0, 0x06, 0x03, 0xc0, 0x60, 0x08, 0x01, 0x80, 0x10, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00};

void updateDisplay1() {
    display1.clearDisplay();
    display1.drawBitmap(xx - 16, yy - 16, bitmap6, 32, 32, 1);
    display1.display();


    // Algorithm from:
    // https://www.101computing.net/bouncing-algorithm/
    xx += vx;
    yy += vy;

    if (xx < 16 || xx >= (SCREEN_WIDTH - 16)) {
    	vx = -vx;
    	xx += vx;
    }

    if (yy < 16 || yy >= (SCREEN_HEIGHT - 16)) {
    	vy = -vy;
    	yy += vy;
    }
}


const uint8_t bitmap7[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x20, 0x38, 0x0c, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x03, 0x81, 0x80, 0x00, 0x60, 0x00, 0x00, 0x00, 0x38, 0x38, 0x38, 0x03, 0x83, 0xf0, 0x00, 0x00, 0x03, 0x81, 0x80, 0x00, 0x60, 0x00, 0x00, 0x00, 0x1e, 0x3c, 0x70, 0x03, 0x80, 0x78, 0x00, 0x00, 0x03, 0x81, 0x80, 0x00, 0x60, 0x00, 0x00, 0x00, 0x0f, 0xbd, 0xf0, 0x03, 0x80, 0x38, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x07, 0xc7, 0xe0, 0x03, 0x80, 0x18, 0xfe, 0x0c, 0x1b, 0xfd, 0x81, 0xf0, 0x60, 0x78, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x03, 0x80, 0x1b, 0xff, 0x8c, 0xfb, 0xfd, 0x87, 0xfc, 0x61, 0xff, 0x00, 0x00, 0x03, 0xff, 0x80, 0x03, 0x80, 0x1b, 0x83, 0xcf, 0xe3, 0x81, 0x8f, 0x1f, 0x63, 0xc7, 0x80, 0x00, 0x3d, 0xff, 0xf8, 0x03, 0x80, 0x38, 0x00, 0xcf, 0x83, 0x81, 0x9c, 0x07, 0x67, 0x03, 0x80, 0x03, 0xfe, 0xff, 0x7f, 0x83, 0x80, 0x70, 0x00, 0xef, 0x03, 0x81, 0xb8, 0x00, 0x6e, 0x01, 0xc0, 0x00, 0xfd, 0xff, 0x7f, 0x03, 0xff, 0xe0, 0x7f, 0xee, 0x03, 0x81, 0xb0, 0x00, 0x6c, 0x00, 0xc0, 0x00, 0x03, 0xff, 0x80, 0x03, 0xff, 0xc1, 0xff, 0xec, 0x03, 0x81, 0xb0, 0x00, 0x6f, 0xff, 0xc0, 0x00, 0x03, 0xff, 0xc0, 0x03, 0x80, 0x07, 0xc0, 0xec, 0x03, 0x81, 0xb0, 0x00, 0x6f, 0xff, 0xc0, 0x00, 0x07, 0xef, 0xe0, 0x03, 0x80, 0x07, 0x00, 0xec, 0x03, 0x81, 0xb0, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x0f, 0xbb, 0xe0, 0x03, 0x80, 0x06, 0x00, 0xec, 0x03, 0x81, 0xb8, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x1f, 0x3c, 0xf0, 0x03, 0x80, 0x06, 0x00, 0xec, 0x03, 0x81, 0xb8, 0x02, 0x6e, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x38, 0x03, 0x80, 0x07, 0x03, 0xec, 0x01, 0x81, 0x9e, 0x07, 0x67, 0x01, 0xc0, 0x00, 0x30, 0x38, 0x1c, 0x03, 0x80, 0x03, 0xff, 0xec, 0x01, 0xfd, 0x8f, 0xfe, 0x63, 0xff, 0x80, 0x00, 0x00, 0x18, 0x00, 0x03, 0x80, 0x01, 0xfe, 0xec, 0x00, 0xfd, 0x83, 0xfc, 0x61, 0xff, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

void updateDisplay2() {
	display2.clearDisplay();
	display2.drawBitmap(0, yy2, bitmap7, 128, 32, 1);
	display2.display();

	yy2 += vy2;
	if (yy2 < 0 || yy2 >= 32) {
		vy2 = -vy2;
		yy2 += vy2;
	}

}



